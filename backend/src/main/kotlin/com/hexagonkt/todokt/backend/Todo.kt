package com.hexagonkt.todokt.backend

import com.hexagonkt.server.jetty.serve
import com.hexagonkt.store.mongodb.MongoIdRepository
import com.hexagonkt.templates.TemplateManager.render
import com.hexagonkt.templates.pebble.PebbleAdapter
import com.hexagonkt.todokt.backend.TaskPriority.NORMAL
import java.time.LocalDateTime

/**
 * Task priority.
 */
enum class TaskPriority { HIGH, NORMAL, LOW }

/**
 * Task entity.
 */
data class Task(
    val code: String,
    val name: String,
    val labels: List<String> = emptyList(),
    val context: List<String> = emptyList(),
    val priority: TaskPriority = NORMAL,
    val createdAt: LocalDateTime = LocalDateTime.now(),
    val completedAt: LocalDateTime? = null,
    val deletedAt: LocalDateTime? = null
)

/** Store for tasks. */
val store = MongoIdRepository(Task::class, Task::code)

fun main(vararg args: String) {
    serve {
        // Serves 'resources/public' classpath folder from servers root '/'
        assets("public")

        // Renders index page from Pebble template. SPA which code is generated by Frontend module
        get {
            val locale = obtainLocale()
            val context = fullContext(locale, emptyMap<String, Any>())
            render(PebbleAdapter, "index.html", locale, context)
        }

        path("/tasks") {
            get {}
            post {}
            delete {}
        }
    }
}
